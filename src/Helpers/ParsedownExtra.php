<?php


namespace Kadet\Blog\Helpers;


use Kadet\Highlighter\KeyLighter;

class ParsedownExtra extends \ParsedownExtra
{
    public function __construct()
    {
        parent::__construct();

        $this->InlineTypes['$'] = ['Math'];
        $this->inlineMarkerList .= '$';
    }

    protected function paragraph($Line)
    {
        if (preg_match('/^!\[.*?\]\(.*?\)\{.*?\.hero.*?\}$/', $Line["text"])) {
            return $this->inlineImage($Line);
        }

        return parent::paragraph($Line); // TODO: Change the autogenerated stub
    }

    protected function blockFencedCode($Line)
    {
        if (preg_match('/^[' . $Line['text'][0] . ']{3,}[ ]*([\w->]+)?[ ]*$/', $Line['text'], $matches)) {
            if (!isset($matches[1])) {
                $matches[1] = 'text';
            }

            $Block = [
                'char'     => $Line['text'][0],
                'language' => KeyLighter::get()->getLanguage($matches[1]),
                'element'  => [
                    'name'       => 'pre',
                    'attributes' => [
                        'class' => 'keylighter',
                    ],
                    'handler' => 'element',
                    'text'       => [
                        'name'       => 'code',
                        'text'       => '',
                    ]
                ],
            ];

            return $Block;
        }
    }

    protected function blockFencedCodeContinue($Line, $Block)
    {
        if (isset($Block['complete'])) {
            return;
        }

        if (isset($Block['interrupted'])) {
            $Block['element']['text']['text'] .= "\n";

            unset($Block['interrupted']);
        }

        if (preg_match('/^' . $Block['char'] . '{3,}[ ]*$/', $Line['text'])) {
            $Block['element']['text']['text'] = substr($Block['element']['text']['text'], 1);

            $Block['complete'] = true;

            return $Block;
        }

        $Block['element']['text']['text'] .= "\n" . $Line['body'];

        return $Block;
    }

    protected function blockFencedCodeComplete($Block)
    {
        $text = $Block['element']['text']['text'];
        $Block['element']['text']['text'] = \Kadet\Highlighter\highlight($text, $Block['language'], KeyLighter::get()->getFormatter('html'));

        return $Block;
    }

    protected function blockTable($Line, array $Block = null)
    {
        $Block                          = parent::blockTable($Line, $Block);
        $Block['element']['attributes'] = ['class' => 'table'];

        return $Block;
    }

    protected function blockMetadata($Line, array $Block = null)
    {
        $Block                          = parent::blockTable($Line, $Block);
        $Block['element']['attributes'] = ['class' => 'table'];

        return $Block;
    }

    protected function inlineCode($Excerpt)
    {
        $Block = parent::inlineCode($Excerpt);
        if (substr($Excerpt['text'], 0, 2) == '``') {
            $Block['element']['name']       = 'pre';
            $Block['element']['attributes'] = ['class' => 'keylighter inline'];
        }

        return $Block;
    }

    protected function inlineMath($Excerpt)
    {
        if(preg_match('/\$(.*?)\$/', $Excerpt['text'], $matches)) {
            return [
                'extent' => strlen($matches[0]),
                'element' => [
                    'name' => 'span',
                    'attributes' => [
                        'class' => 'math',
                    ],
                    'text' => $matches[1],
                ]
            ];
        } elseif(($context = $Excerpt['context'])[0] == '$') {
            return [
                'extent' => strlen($context),
                'element' => [
                    'name' => 'span',
                    'attributes' => [
                        'class' => 'math display',
                    ],
                    'text' => trim(substr($context, 1)),
                ]
            ];
        }
        return null;
    }
}
